<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Scrabble Roto</title>
    <link>//localhost:1313/</link>
    <description>Recent content on Scrabble Roto</description>
    <generator>Hugo -- 0.151.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Jul 2025 21:01:46 -0400</lastBuildDate>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Admin Panel</title>
      <link>//localhost:1313/admin/</link>
      <pubDate>Sat, 19 Jul 2025 21:01:46 -0400</pubDate>
      <guid>//localhost:1313/admin/</guid>
      <description>&lt;div id=&#34;adminContainer&#34;&gt;
    &lt;div id=&#34;adminTabs&#34;&gt;
        &lt;button class=&#34;tab-btn active&#34; onclick=&#34;showTab(&#39;events&#39;)&#34;&gt;Events &amp; Rating Bands&lt;/button&gt;
        &lt;button class=&#34;tab-btn&#34; onclick=&#34;showTab(&#39;players&#39;)&#34;&gt;Players&lt;/button&gt;
        &lt;button class=&#34;tab-btn&#34; onclick=&#34;showTab(&#39;teams&#39;)&#34;&gt;Teams&lt;/button&gt;
        &lt;button class=&#34;tab-btn&#34; onclick=&#34;showTab(&#39;users&#39;)&#34;&gt;Users&lt;/button&gt;
    &lt;/div&gt;

    &lt;!-- Events &amp; Rating Bands Tab --&gt;
    &lt;div id=&#34;eventsTab&#34; class=&#34;tab-content active&#34;&gt;
        &lt;h2&gt;Events Management&lt;/h2&gt;
        
        &lt;div class=&#34;section&#34;&gt;
            &lt;h3&gt;Create New Event&lt;/h3&gt;
            &lt;form id=&#34;eventForm&#34;&gt;
                &lt;div class=&#34;form-row&#34;&gt;
                    &lt;input type=&#34;text&#34; id=&#34;eventName&#34; placeholder=&#34;Event Name&#34; required&gt;
                    &lt;input type=&#34;text&#34; id=&#34;eventDescription&#34; placeholder=&#34;Description&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;form-row&#34;&gt;
                    &lt;input type=&#34;date&#34; id=&#34;eventStartDate&#34;&gt;
                    &lt;input type=&#34;date&#34; id=&#34;eventEndDate&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;form-row&#34;&gt;
                    &lt;label for=&#34;eventTeamDeadline&#34; style=&#34;display: flex; align-items: center; gap: 0.5rem;&#34;&gt;
                        Team Deadline (optional):
                        &lt;input type=&#34;datetime-local&#34; id=&#34;eventTeamDeadline&#34; style=&#34;flex: 1;&#34;&gt;
                    &lt;/label&gt;
                    &lt;small style=&#34;color: #666; margin-left: 0.5rem;&#34;&gt;Your timezone: &lt;span id=&#34;createTimezone&#34;&gt;&lt;/span&gt;&lt;/small&gt;
                &lt;/div&gt;
                &lt;button type=&#34;submit&#34;&gt;Create Event&lt;/button&gt;
            &lt;/form&gt;
        &lt;/div&gt;

        &lt;div class=&#34;section&#34;&gt;
            &lt;h3&gt;Event Deadline Status&lt;/h3&gt;
            &lt;button onclick=&#34;loadEventDeadlines()&#34;&gt;Check Deadlines&lt;/button&gt;
            &lt;div id=&#34;eventDeadlinesContainer&#34;&gt;
                &lt;p&gt;Click &#34;Check Deadlines&#34; to view team creation status&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&#34;section&#34;&gt;
            &lt;h3&gt;Edit Event Deadlines&lt;/h3&gt;
            &lt;div class=&#34;form-row&#34;&gt;
                &lt;select id=&#34;deadlineEventSelect&#34;&gt;
                    &lt;option value=&#34;&#34;&gt;Select Event to Edit Deadline...&lt;/option&gt;
                &lt;/select&gt;
                &lt;button onclick=&#34;loadEventForDeadlineEdit()&#34;&gt;Edit Deadline&lt;/button&gt;
            &lt;/div&gt;
            &lt;div id=&#34;deadlineEditContainer&#34; style=&#34;display: none;&#34;&gt;
                &lt;form id=&#34;deadlineEditForm&#34;&gt;
                    &lt;div class=&#34;form-row&#34;&gt;
                        &lt;label for=&#34;editEventDeadline&#34; style=&#34;display: flex; align-items: center; gap: 0.5rem;&#34;&gt;
                            Team Deadline:
                            &lt;input type=&#34;datetime-local&#34; id=&#34;editEventDeadline&#34; style=&#34;flex: 1;&#34;&gt;
                        &lt;/label&gt;
                        &lt;small style=&#34;color: #666; margin-left: 0.5rem;&#34;&gt;Your timezone: &lt;span id=&#34;editTimezone&#34;&gt;&lt;/span&gt;&lt;/small&gt;
                    &lt;/div&gt;
                    &lt;div class=&#34;form-row&#34;&gt;
                        &lt;button type=&#34;submit&#34;&gt;Update Deadline&lt;/button&gt;
                        &lt;button type=&#34;button&#34; onclick=&#34;clearDeadline()&#34;&gt;Clear Deadline&lt;/button&gt;
                        &lt;button type=&#34;button&#34; onclick=&#34;cancelDeadlineEdit()&#34;&gt;Cancel&lt;/button&gt;
                    &lt;/div&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&#34;section&#34;&gt;
            &lt;h3&gt;Rating Bands&lt;/h3&gt;
            &lt;div class=&#34;form-row&#34;&gt;
                &lt;select id=&#34;eventSelect&#34;&gt;
                    &lt;option value=&#34;&#34;&gt;Select Event...&lt;/option&gt;
                &lt;/select&gt;
                &lt;button onclick=&#34;loadRatingBands()&#34;&gt;Load Bands&lt;/button&gt;
            &lt;/div&gt;
            
            &lt;div id=&#34;ratingBandsContainer&#34;&gt;
                &lt;p&gt;Select an event to manage rating bands&lt;/p&gt;</description>
    </item>
    <item>
      <title>Create Team</title>
      <link>//localhost:1313/create-team/</link>
      <pubDate>Sat, 19 Jul 2025 18:47:33 -0400</pubDate>
      <guid>//localhost:1313/create-team/</guid>
      <description>&lt;h1&gt;Create Your Team&lt;/h1&gt;

&lt;div id=&#34;createTeamContainer&#34;&gt;
  &lt;form id=&#34;teamForm&#34;&gt;
    &lt;div class=&#34;form-group&#34;&gt;
      &lt;label for=&#34;teamName&#34;&gt;Team Name:&lt;/label&gt;
      &lt;input type=&#34;text&#34; id=&#34;teamName&#34; required /&gt;
    &lt;/div&gt;

    &lt;div class=&#34;form-group&#34;&gt;
      &lt;label for=&#34;eventSelect&#34;&gt;Event:&lt;/label&gt;
      &lt;select id=&#34;eventSelect&#34; required&gt;
        &lt;option value=&#34;&#34;&gt;Select an event...&lt;/option&gt;
      &lt;/select&gt;
    &lt;/div&gt;

    &lt;div id=&#34;playerSelections&#34;&gt;&lt;/div&gt;

    &lt;div id=&#34;teamError&#34; class=&#34;error-message&#34; style=&#34;display: none&#34;&gt;&lt;/div&gt;
    &lt;button type=&#34;submit&#34;&gt;Create Team&lt;/button&gt;
  &lt;/form&gt;
&lt;/div&gt;

&lt;script&gt;
  document.addEventListener(&#34;DOMContentLoaded&#34;, async function () {
    if (!(await requireAuth())) return;

    loadEvents();

    document
      .getElementById(&#34;eventSelect&#34;)
      .addEventListener(&#34;change&#34;, function () {
        loadRatingBands();
        updateSubmitButton();
      });
    document.getElementById(&#34;teamForm&#34;).addEventListener(&#34;submit&#34;, createTeam);

    // Initially disable submit button
    updateSubmitButton();
  });

  async function loadEvents() {
    try {
      // Check if current user is admin
      const { data: profile } = await supabase
        .from(&#34;profiles&#34;)
        .select(&#34;is_admin&#34;)
        .eq(&#34;id&#34;, currentUser.id)
        .single();
      
      const isAdmin = profile?.is_admin || false;

      const { data: events, error } = await supabase
        .from(&#34;event_deadline_status&#34;)
        .select(&#34;*&#34;)
        .eq(&#34;is_active&#34;, true)
        .order(&#34;start_date&#34;, { ascending: false });

      if (error) throw error;

      const select = document.getElementById(&#34;eventSelect&#34;);
      events.forEach((event, index) =&gt; {
        const option = document.createElement(&#34;option&#34;);
        option.value = event.id;
        option.textContent = `${event.name} ${!event.teams_allowed &amp;&amp; !isAdmin ? &#39;(CLOSED)&#39; : &#39;&#39;}`;
        option.disabled = !event.teams_allowed &amp;&amp; !isAdmin;
        select.appendChild(option);
      });

      // Auto-select the latest event (open for users, any for admins)
      const availableEvent = isAdmin 
        ? events[0] 
        : events.find(e =&gt; e.teams_allowed);
        
      if (availableEvent) {
        select.value = availableEvent.id;
        await loadRatingBands();
        updateSubmitButton();
      } else if (events.length &gt; 0 &amp;&amp; !isAdmin) {
        // Show deadline message if no events are open for non-admins
        showDeadlineMessage(events[0]);
      }
    } catch (error) {
      console.error(&#34;Error loading events:&#34;, error);
    }
  }

  async function loadRatingBands() {
    const eventId = document.getElementById(&#34;eventSelect&#34;).value;
    if (!eventId) return;

    try {
      const { data: bands, error } = await supabase
        .from(&#34;rating_bands&#34;)
        .select(&#34;*&#34;)
        .eq(&#34;event_id&#34;, eventId)
        .order(&#34;id&#34;, { ascending: true });

      if (error) throw error;

      await createPlayerSelections(bands, eventId);
    } catch (error) {
      console.error(&#34;Error loading rating bands:&#34;, error);
    }
  }

  async function createPlayerSelections(bands, eventId) {
    const container = document.getElementById(&#34;playerSelections&#34;);
    container.innerHTML = &#34;&#34;;

    for (const band of bands) {
      const { data: players, error } = await supabase
        .from(&#34;players&#34;)
        .select(&#34;*&#34;)
        .eq(&#34;event_id&#34;, eventId)
        .eq(&#34;current_rating_band_id&#34;, band.id)
        .eq(&#34;is_active&#34;, true)
        .eq(&#34;dropped_out&#34;, false)
        .order(&#34;current_rating&#34;, { ascending: false });

      if (error) {
        console.error(&#34;Error loading players for band:&#34;, band.name, error);
        continue;
      }

      const div = document.createElement(&#34;div&#34;);
      div.className = &#34;rating-band-selection&#34;;
      div.setAttribute(&#34;data-band-id&#34;, band.id);
      div.innerHTML = `
            &lt;h3&gt;${band.name}&lt;/h3&gt;
            &lt;select name=&#34;player-${band.id}&#34; required&gt;
                &lt;option value=&#34;&#34;&gt;Select a player...&lt;/option&gt;
                ${players
                  .map(
                    (player) =&gt;
                      `&lt;option value=&#34;${player.id}&#34;&gt;${player.name} (${player.current_rating})&lt;/option&gt;`
                  )
                  .join(&#34;&#34;)}
            &lt;/select&gt;
        `;

      // Add change listener for visual feedback
      const select = div.querySelector(&#34;select&#34;);
      select.addEventListener(&#34;change&#34;, function () {
        updateBandStatus(div, this.value);
        updateSubmitButton();
      });

      container.appendChild(div);
    }

    // Initially disable submit button
    updateSubmitButton();
  }

  function updateBandStatus(bandDiv, selectedValue) {
    if (selectedValue) {
      bandDiv.classList.remove(&#34;invalid&#34;);
      bandDiv.classList.add(&#34;completed&#34;);
    } else {
      bandDiv.classList.remove(&#34;completed&#34;);
      bandDiv.classList.remove(&#34;invalid&#34;);
    }
  }

  function showDeadlineMessage(event) {
    const container = document.getElementById(&#34;playerSelections&#34;);
    container.innerHTML = `
      &lt;div class=&#34;deadline-message error-message&#34;&gt;
        &lt;h3&gt;Team Creation Closed&lt;/h3&gt;
        &lt;p&gt;The deadline for creating teams for &lt;strong&gt;${event.name}&lt;/strong&gt; has passed.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
